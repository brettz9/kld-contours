{"version":3,"file":"index-umd.min.js","sources":["../lib/BoundingBox2D.js","../lib/Polygon2D.js","../lib/Circle2D.js","../lib/CubicBezier2D.js","../lib/Ellipse2D.js","../lib/Line2D.js","../lib/QuadraticBezier2D.js","../lib/Rectangle2D.js"],"sourcesContent":["/**\n *  BoundingBox2D.js\n *\n *  @module BoundingBox2D\n *  @copyright 2011-2019 Kevin Lindsey\n */\n\n/**\n *  BoundingBox2D\n */\nclass BoundingBox2D {\n    /**\n     *  @param {number} x\n     *  @param {number} y\n     *  @param {number} width\n     *  @param {number} height\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     *  overlaps\n     *\n     *  @param {module:kld-contours.BoundingBox2D} that\n     *  @returns {boolean}\n     */\n    overlaps(that) {\n        return (\n            this.x < (that.x + that.width) && (this.x + this.width) > that.x &&\n            this.y < (that.y + that.height) && (this.y + this.height) > that.y\n        );\n    }\n\n    /**\n     *  isEmpty\n     *\n     *  @returns {boolean}\n     */\n    isEmpty() {\n        return this.width !== 0 && this.height !== 0;\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return (\n            \"bbox(\" +\n            this.x + \",\" +\n            this.y + \",\" +\n            this.width + \",\" +\n            this.height + \")\"\n        );\n    }\n}\n\nexport default BoundingBox2D;\n","/**\n *  Polygon2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module Polygon2D\n */\nimport BoundingBox2D from \"./BoundingBox2D.js\";\n\n/**\n *  Polygon2D\n */\nclass Polygon2D {\n    /**\n     *  @param {Array<module:kld-affine.Point2D>} points\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    constructor(points) {\n        this.points = (points !== undefined) ? points : [];\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        if (this.points.length > 0) {\n            let min = this.points[0];\n            let max = this.points[0];\n\n            for (let i = 1; i < this.points.length; i++) {\n                const point = this.points[i];\n\n                min = min.min(point);\n                max = max.max(point);\n            }\n\n            return new BoundingBox2D(\n                min.x,\n                min.y,\n                max.x - min.x,\n                max.y - max.y\n            );\n        }\n\n        return new BoundingBox2D(0, 0, 0, 0);\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D() {\n        return this;\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return this.points.map(p => {\n            return `${p.x}, ${p.y}`;\n        }).join(\" \");\n    }\n}\n\nexport default Polygon2D;\n","/* eslint-disable class-methods-use-this */\n/**\n *  Circle2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module Circle2D\n */\nimport BoundingBox2D from \"./BoundingBox2D.js\";\nimport Polygon2D from \"./Polygon2D.js\";\n\n/**\n *  Circle2D\n */\nclass Circle2D {\n    /**\n     *  @param {module:kld-affine.Point2D} center\n     *  @param {number} radius\n     *  @returns {module:kld-contours.Circle2D}\n     */\n    constructor(center, radius) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        return new BoundingBox2D(\n            this.center.x - this.radius,\n            this.center.y - this.radius,\n            this.radius * 2.0,\n            this.radius * 2.0\n        );\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D() {\n        return new Polygon2D();\n    }\n}\n\nexport default Circle2D;\n","/**\n *  CubicBezier2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module CubicBezier2D\n */\nimport {Polynomial, SqrtPolynomial} from \"kld-polynomial\";\nimport {Matrix2D, Point2D, Vector2D} from \"kld-affine\";\nimport BoundingBox2D from \"./BoundingBox2D.js\";\nimport Polygon2D from \"./Polygon2D.js\";\n\n/**\n *  CubicBezier2D\n */\nclass CubicBezier2D {\n    /**\n     *  @param {module:kld-affine.Point2D} p1\n     *  @param {module:kld-affine.Point2D} p2\n     *  @param {module:kld-affine.Point2D} p3\n     *  @param {module:kld-affine.Point2D} p4\n     *  @returns {module:kld-contours.CubicBezier2D}\n     */\n    constructor(p1, p2, p3, p4) {\n        this.p1 = p1;\n        this.p2 = p2;\n        this.p3 = p3;\n        this.p4 = p4;\n    }\n\n    /**\n     *  getPointAtParameter\n     *\n     *  @param {number} t\n     *  @returns {module:kld-affine.Point2D}\n     */\n    getPointAtParameter(t) {\n        // TODO: validate t in [0,1]\n\n        // first round of lerps\n        const p5 = this.p1.lerp(this.p2, t);\n        const p6 = this.p2.lerp(this.p3, t);\n        const p7 = this.p3.lerp(this.p4, t);\n\n        // second round of lerps\n        const p8 = p5.lerp(p6, t);\n        const p9 = p6.lerp(p7, t);\n\n        return p8.lerp(p9, t);\n    }\n\n    /**\n     *  splitAtParameter\n     *\n     *  @param {number} t\n     *  @returns {Array<module:kld-contours.CubicBezier2D>}\n     */\n    splitAtParameter(t) {\n        // first round of lerps\n        const p5 = this.p1.lerp(this.p2, t);\n        const p6 = this.p2.lerp(this.p3, t);\n        const p7 = this.p3.lerp(this.p4, t);\n\n        // second round of lerps\n        const p8 = p5.lerp(p6, t);\n        const p9 = p6.lerp(p7, t);\n\n        // third round of lerps\n        const p10 = p8.lerp(p9, t);\n\n        return [\n            new CubicBezier2D(this.p1, p5, p8, p10),\n            new CubicBezier2D(p10, p9, p7, this.p4)\n        ];\n    }\n\n    /**\n     *  getBernsteinPolynomials\n     *\n     *  @returns {{x: module:kld-polynomial.Polynomial, y: module:kld-polynomial.Polynomial}}\n     */\n    getBernsteinPolynomials() {\n        let a, b, c;\n\n        // Start with Bezier using Bernstein polynomials for weighting functions:\n        //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n        //\n        // Expand and collect terms to form linear combinations of original Bezier\n        // controls.  This ends up with a vector cubic in t:\n        //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n        //             /\\                  /\\                /\\       /\\\n        //             ||                  ||                ||       ||\n        //             c3                  c2                c1       c0\n\n        // Calculate the coefficients\n        a = this.p1.multiply(-1);\n        b = this.p2.multiply(3);\n        c = this.p3.multiply(-3);\n        const c3 = a.add(b.add(c.add(this.p4)));\n\n        a = this.p1.multiply(3);\n        b = this.p2.multiply(-6);\n        c = this.p3.multiply(3);\n        const c2 = a.add(b.add(c));\n\n        a = this.p1.multiply(-3);\n        b = this.p2.multiply(3);\n        const c1 = a.add(b);\n\n        const c0 = this.p1;\n\n        return {\n            x: new Polynomial(c3.x, c2.x, c1.x, c0.x),\n            y: new Polynomial(c3.y, c2.y, c1.y, c0.y)\n        };\n    }\n\n    /**\n     *  getArcLengthPolynomial\n     *\n     *  @returns {module:kld-polynomial.SqrtPolynomial}\n     */\n    getArcLengthPolynomial() {\n        // TODO: use Object.defineProperty\n        // TODO: use results from getBernsteinPolynomials but need getCoeficent in\n        // Polynomial first\n\n        /* eslint-disable-next-line no-prototype-builtins */\n        if (!this.hasOwnProperty(\"arcLengthPolynomial\")) {\n            let a, b, c;\n\n            // convert to Bernstein polynomials\n            a = this.p1.multiply(-1);\n            b = this.p2.multiply(3);\n            c = this.p3.multiply(-3);\n            const c3 = a.add(b.add(c.add(this.p4)));\n\n            a = this.p1.multiply(3);\n            b = this.p2.multiply(-6);\n            c = this.p3.multiply(3);\n            const c2 = a.add(b.add(c));\n\n            a = this.p1.multiply(-3);\n            b = this.p2.multiply(3);\n            const c1 = a.add(b);\n\n            //  ____________\n            // âˆš dx^2 + dy^2\n            //\n            this.arcLengthPolynomial = new SqrtPolynomial(\n                9 * (c3.x * c3.x + c3.y * c3.y),\n                12 * (c2.x * c3.x + c2.y * c3.y),\n                4 * (c2.x * c2.x + c2.y * c2.y) + 6 * (c1.x * c3.x + c1.y * c3.y),\n                4 * (c1.x * c2.x + c1.y * c2.y),\n                c1.x * c1.x + c1.y * c1.y\n            );\n\n            this.arcLength = this.arcLengthPolynomial.romberg(0, 1);\n            // this.arcLength = this.arcLengthPolynomial.simpson(0, 1);\n        }\n\n        return this.arcLengthPolynomial;\n    }\n\n    /**\n     *  getParameterFromArcLength\n     *\n     *  @param {number} arcLength\n     *  @returns {number}\n     */\n    getParameterFromArcLength(arcLength) {\n        // TODO: extract common Bezier code\n\n        // make sure the arc length polynomial and arc length values have been calculated\n        const arcLengthPolynomial = this.getArcLengthPolynomial();\n        let result;\n\n        if (arcLength <= 0) {\n            result = 0;\n        }\n        else if (arcLength >= this.arcLength) {\n            result = 1;\n        }\n        else {\n            const TOLERANCE = 1e-9;\n            const MAXITERS = 20;\n\n            result = arcLength / this.arcLength;\n\n            for (let i = 0; i <= MAXITERS; i++) {\n                const diff = arcLengthPolynomial.romberg(0, result) - arcLength;\n\n                if (Math.abs(diff) < TOLERANCE) {\n                    break;\n                }\n\n                const value = arcLengthPolynomial.eval(result);\n\n                if (value === 0) {\n                    break;\n                }\n\n                result -= diff / value;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        const polys = this.getBernsteinPolynomials();\n        const dx = polys.x.getDerivative();\n        const dy = polys.y.getDerivative();\n        let roots = dx.getRootsInInterval(0, 1);\n\n        roots = roots.concat(dy.getRootsInInterval(0, 1));\n\n        // initialize min/max using the first and last points on the curve\n        let min = this.p1.min(this.p4);\n        let max = this.p1.max(this.p4);\n\n        // and now update min/max with points between p1 and p4\n        roots.forEach(function(t) {\n            if (0 <= t && t <= 1) {\n                const testPoint = new Point2D(\n                    polys.x.eval(t),\n                    polys.y.eval(t)\n                );\n\n                min = min.min(testPoint);\n                max = max.max(testPoint);\n            }\n        });\n\n        return new BoundingBox2D(\n            min.x,\n            min.y,\n            max.x - min.x,\n            max.y - min.y\n        );\n    }\n\n    /**\n     *  getAlignedBoundingBox\n     *\n     *  @returns {{ bbox: module:kld-contours.BoundingBox2D, transform: module:kld-affine.Matrix2D }}\n     */\n    getAlignedBoundingBox() {\n        return {\n            bbox: this.getAlignedBezier().getBoundingBox(),\n            transform: new Matrix2D()\n                .translation(this.p1.x, this.p1.y)\n                .rotateFromVector(Vector2D.fromPoints(this.p1, this.p4))\n        };\n    }\n\n    /**\n     *  getAlignedBezier\n     *\n     *  @returns {module:kld-contours.CubicBezier2D}\n     */\n    getAlignedBezier() {\n        const matrix = Matrix2D\n            .translation(this.p1.x, this.p1.y) // move p1 to the origin\n            .rotateFromVector(Vector2D.fromPoints(this.p1, this.p4)) // rotate vector from p1 to p4 to x-axis\n            .inverse(); // reverse transforms\n\n        // apply to each point and create new Bezier\n        return new CubicBezier2D(\n            this.p1.transform(matrix),\n            this.p2.transform(matrix),\n            this.p3.transform(matrix),\n            this.p4.transform(matrix)\n        );\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @param {number} [flatness]\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D(flatness) {\n        const points = [];\n        const zeroVector = new Vector2D(0, 0);\n\n        flatness = flatness !== undefined ? flatness : 1.0;\n\n        // add first point\n        points.push(this.p1);\n\n        // add middle points\n        /**\n         *  @param {number} p1\n         *  @param {number} p2\n         *  @param {number} p3\n         *  @param {number} p4\n         */\n        function tesselateInterior(p1, p2, p3, p4) {\n            // round 1\n            const p5 = p1.lerp(p2, 0.5);\n            const p6 = p2.lerp(p3, 0.5);\n            const p7 = p3.lerp(p4, 0.5);\n\n            // round 2\n            const p8 = p5.lerp(p6, 0.5);\n            const p9 = p6.lerp(p7, 0.5);\n\n            // round 3\n            const p10 = p8.lerp(p9, 0.5);\n\n            const baseline = Vector2D.fromPoints(p1, p4);\n            const tangent1 = Vector2D.fromPoints(p1, p2);\n            const tangent2 = Vector2D.fromPoints(p4, p3);\n            let dmax = 0;\n\n            if (zeroVector.equals(tangent1) === false) {\n                const perpendicular = baseline.perpendicular(tangent1);\n\n                dmax = perpendicular.length();\n            }\n            if (zeroVector.equals(tangent2) === false) {\n                const perpendicular = baseline.perpendicular(tangent2);\n\n                dmax = Math.max(dmax, perpendicular.length());\n            }\n\n            if (dmax > flatness) {\n                tesselateInterior(p1, p5, p8, p10);\n                points.push(new Point2D(p10.x, p10.y));\n                tesselateInterior(p10, p9, p7, p4);\n            }\n            else {\n                points.push(new Point2D(p10.x, p10.y));\n            }\n        }\n\n        // add interior points\n        tesselateInterior(this.p1, this.p2, this.p3, this.p4);\n\n        // add last point\n        points.push(this.p4);\n\n        return new Polygon2D(points);\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return (\n            \"M\" + this.p1.x + \",\" + this.p1.y + \" \" +\n            \"C\" + this.p2.x + \",\" + this.p2.y +\n            \" \" + this.p3.x + \",\" + this.p3.y +\n            \" \" + this.p4.x + \",\" + this.p4.y\n        );\n    }\n}\n\nexport default CubicBezier2D;\n","/* eslint-disable class-methods-use-this */\n/**\n *  Ellipse2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module Ellipse2D\n */\nimport BoundingBox2D from \"./BoundingBox2D.js\";\nimport Polygon2D from \"./Polygon2D.js\";\n\n/**\n *  Ellipse2D\n */\nclass Ellipse2D {\n    /**\n     *  @param {module:kld-affine.Point2D} center\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-contours.Ellipse2D}\n     */\n    constructor(center, radiusX, radiusY) {\n        this.center = center;\n        this.radiusX = radiusX;\n        this.radiusY = radiusY;\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        return new BoundingBox2D(\n            this.center.x - this.radiusX,\n            this.center.y - this.radiusY,\n            this.radiusX * 2.0,\n            this.radiusY * 2.0\n        );\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D() {\n        return new Polygon2D();\n    }\n}\n\nexport default Ellipse2D;\n","/**\n *  Line2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module Line2D\n */\nimport BoundingBox2D from \"./BoundingBox2D.js\";\nimport Polygon2D from \"./Polygon2D.js\";\n\n/**\n *  Line2D\n */\nclass Line2D {\n    /**\n     *  @param {module:kld-affine.Point2D} p1\n     *  @param {module:kld-affine.Point2D} p2\n     *  @returns {module:kld-contours.Line2D}\n     */\n    constructor(p1, p2) {\n        this.p1 = p1;\n        this.p2 = p2;\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        const min = this.p1.min(this.p2);\n        const max = this.p1.max(this.p2);\n\n        return new BoundingBox2D(\n            min.x,\n            min.y,\n            max.x - min.x,\n            max.y - min.y\n        );\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D() {\n        return new Polygon2D([this.p1, this.p2]);\n    }\n}\n\nexport default Line2D;\n","/**\n *  QuadraticBezier2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module QuadraticBezier2D\n */\nimport {Polynomial, SqrtPolynomial} from \"kld-polynomial\";\nimport {Matrix2D, Point2D, Vector2D} from \"kld-affine\";\nimport BoundingBox2D from \"./BoundingBox2D.js\";\nimport Polygon2D from \"./Polygon2D.js\";\n\n/**\n *  QuadraticBezier2D\n */\nclass QuadraticBezier2D {\n    /**\n     *  @param {module:kld-affine.Point2D} p1\n     *  @param {module:kld-affine.Point2D} p2\n     *  @param {module:kld-affine.Point2D} p3\n     *  @returns {module:kld-contours.QuadraticBezier2D}\n     */\n    constructor(p1, p2, p3) {\n        this.p1 = p1;\n        this.p2 = p2;\n        this.p3 = p3;\n    }\n\n    /**\n     *  getPointAtParameter\n     *\n     *  @param {number} t\n     *  @returns {module:kld-affine.Point2D}\n     */\n    getPointAtParameter(t) {\n        // TODO: validate t in [0,1]\n\n        // first round of lerps\n        const p4 = this.p1.lerp(this.p2, t);\n        const p5 = this.p2.lerp(this.p3, t);\n\n        return p4.lerp(p5, t);\n    }\n\n    /**\n     *  splitAtParameter\n     *\n     *  @param {number} t\n     *  @returns {Array<module:kld-contours.QuadraticBezier2D>}\n     */\n    splitAtParameter(t) {\n        // first round of lerps\n        const p4 = this.p1.lerp(this.p2, t);\n        const p5 = this.p2.lerp(this.p3, t);\n\n        // second round of lerps\n        const p6 = p4.lerp(p5, t);\n\n        return [\n            new QuadraticBezier2D(this.p1, p4, p6),\n            new QuadraticBezier2D(p6, p5, this.p3)\n        ];\n    }\n\n    /**\n     *  getBernsteinPolynomials\n     *\n     *  @returns {{x: module:kld-polynomial.Polynomial, y: module:kld-polynomial.Polynomial}}\n     */\n    getBernsteinPolynomials() {\n        let a; // temporary variables\n\n        a = this.p2.multiply(-2);\n        const c2 = this.p1.add(a.add(this.p3));\n\n        a = this.p1.multiply(-2);\n        const b = this.p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = this.p1;\n\n        return {\n            x: new Polynomial(c2.x, c1.x, c0.x),\n            y: new Polynomial(c2.y, c1.y, c0.y)\n        };\n    }\n\n    /**\n     *  getArcLengthPolynomial\n     *\n     *  @returns {module:kld-polynomial.SqrtPolynomial}\n     */\n    getArcLengthPolynomial() {\n        /* eslint-disable-next-line no-prototype-builtins */\n        if (!this.hasOwnProperty(\"arcLengthPolynomial\")) {\n            let a;\n\n            a = this.p2.multiply(-2);\n            const c2 = this.p1.add(a.add(this.p3));\n\n            a = this.p1.multiply(-2);\n            const b = this.p2.multiply(2);\n            const c1 = a.add(b);\n\n            //  ____________\n            // âˆš dx^2 + dy^2\n            //\n            this.arcLengthPolynomial = new SqrtPolynomial(\n                4 * (c2.x * c2.x + c2.y * c2.y),\n                4 * (c1.x * c2.x + c1.y * c2.y),\n                c1.x * c1.x + c1.y * c1.y\n            );\n\n            // this.arcLength = this.arcLengthPolynomial.romberg(0, 1);\n            this.arcLength = this.arcLengthPolynomial.simpson(0, 1);\n        }\n\n        return this.arcLengthPolynomial;\n    }\n\n    /**\n     *  getParameterFromArcLength\n     *\n     *  @param {number} arcLength\n     *  @returns {number}\n     */\n    getParameterFromArcLength(arcLength) {\n        // TODO: extract common Bezier code\n\n        // make sure the arc length polynomial and arc length values have been calculated\n        const arcLengthPolynomial = this.getArcLengthPolynomial();\n        let result;\n\n        if (arcLength <= 0) {\n            result = 0;\n        }\n        else if (arcLength >= this.arcLength) {\n            result = 1;\n        }\n        else {\n            const TOLERANCE = 1e-9;\n            const MAXITERS = 20;\n\n            result = arcLength / this.arcLength;\n\n            for (let i = 0; i <= MAXITERS; i++) {\n                const diff = arcLengthPolynomial.romberg(0, result) - arcLength;\n\n                if (Math.abs(diff) < TOLERANCE) {\n                    break;\n                }\n\n                const value = arcLengthPolynomial.eval(result);\n\n                if (value === 0) {\n                    break;\n                }\n\n                result -= diff / value;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        const polys = this.getBernsteinPolynomials();\n        const dx = polys.x.getDerivative();\n        const dy = polys.y.getDerivative();\n        let roots = dx.getRootsInInterval(0, 1);\n        roots = roots.concat(dy.getRootsInInterval(0, 1));\n\n        let min = this.p1.min(this.p3);\n        let max = this.p1.max(this.p3);\n\n        roots.forEach(function(t) {\n            if (0 <= t && t <= 1) {\n                const testPoint = new Point2D(\n                    polys.x.eval(t),\n                    polys.y.eval(t)\n                );\n\n                min = min.min(testPoint);\n                max = max.max(testPoint);\n            }\n        });\n\n        return new BoundingBox2D(\n            min.x,\n            min.y,\n            max.x - min.x,\n            max.y - min.y\n        );\n    }\n\n    /**\n     *  getAlignedBoundingBox\n     *\n     *  @returns {{ bbox: module:kld-contours.BoundingBox2D, transform: module:kld-affine.Matrix2D }}\n     */\n    getAlignedBoundingBox() {\n        return {\n            bbox: this.getAlignedBezier().getBoundingBox(),\n            transform: Matrix2D\n                .translation(this.p1.x, this.p1.y)\n                .rotateFromVector(Vector2D.fromPoints(this.p1, this.p3))\n        };\n    }\n\n    /**\n     *  getAlignedBezier\n     *\n     *  @returns {module:kld-contours.QuadraticBezier2D}\n     */\n    getAlignedBezier() {\n        const matrix = Matrix2D\n            .translation(this.p1.x, this.p1.y) // move p1 to the origin\n            .rotateFromVector(Vector2D.fromPoints(this.p1, this.p3)) // rotate vector from p1 to p4 to x-axis\n            .inverse(); // reverse transforms\n\n        // apply to each point and create new Bezier\n        return new QuadraticBezier2D(\n            this.p1.transform(matrix),\n            this.p2.transform(matrix),\n            this.p3.transform(matrix)\n        );\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @param {number} [flatness]\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D(flatness) {\n        const points = [];\n        const zeroVector = new Vector2D(0, 0);\n\n        flatness = flatness !== undefined ? flatness : 1.0;\n\n        // add first point\n        points.push(this.p1);\n\n        // add middle points\n        /**\n         *  @param {number} p1\n         *  @param {number} p2\n         *  @param {number} p3\n         */\n        function tesselateInterior(p1, p2, p3) {\n            // round 1\n            const p4 = p1.lerp(p2, 0.5);\n            const p5 = p2.lerp(p3, 0.5);\n\n            // round 2\n            const p6 = p4.lerp(p5, 0.5);\n\n            const baseline = Vector2D.fromPoints(p1, p3);\n            const tangent = Vector2D.fromPoints(p1, p2);\n            let dmax = 0;\n\n            if (zeroVector.equals(tangent) === false) {\n                const perpendicular = baseline.perpendicular(tangent);\n\n                dmax = perpendicular.length();\n            }\n\n            if (dmax > flatness) {\n                tesselateInterior(p1, p4, p6);\n                points.push(new Point2D(p6.x, p6.y));\n                tesselateInterior(p6, p5, p3);\n            }\n            else {\n                points.push(new Point2D(p6.x, p6.y));\n            }\n        }\n\n        // add interior points\n        tesselateInterior(this.p1, this.p2, this.p3);\n\n        // add last point\n        points.push(this.p3);\n\n        return new Polygon2D(points);\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return (\n            \"M\" + this.p1.x + \",\" + this.p1.y + \" \" +\n            \"Q\" + this.p2.x + \",\" + this.p2.y +\n            \" \" + this.p3.x + \",\" + this.p3.y\n        );\n    }\n}\n\nexport default QuadraticBezier2D;\n","/**\n *  Rectangle2D.js\n *\n *  @copyright 2011-2019 Kevin Lindsey\n *  @module Rectangle2D\n */\nimport {Point2D} from \"kld-affine\";\nimport BoundingBox2D from \"./BoundingBox2D.js\";\nimport Polygon2D from \"./Polygon2D.js\";\n\n/**\n *  Rectangle2D\n */\nclass Rectangle2D {\n    /**\n     *  @param {number} x\n     *  @param {number} y\n     *  @param {number} width\n     *  @param {number} height\n     *  @returns {module:kld-contours.Rectangle2D}\n     */\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     *  getBoundingBox\n     *\n     *  @returns {module:kld-contours.BoundingBox2D}\n     */\n    getBoundingBox() {\n        return new BoundingBox2D(\n            this.x,\n            this.y,\n            this.width,\n            this.height\n        );\n    }\n\n    /**\n     *  toPolygon2D\n     *\n     *  @returns {module:kld-contours.Polygon2D}\n     */\n    toPolygon2D() {\n        return new Polygon2D([\n            new Point2D(this.x, this.y),\n            new Point2D(this.x + this.width, this.y),\n            new Point2D(this.x + this.width, this.y + this.height),\n            new Point2D(this.x, this.y + this.height)\n        ]);\n    }\n}\n\nexport default Rectangle2D;\n"],"names":["BoundingBox2D","x","y","width","height","that","this","Polygon2D","points","undefined","length","min","max","i","point","map","p","join","Circle2D","center","radius","CubicBezier2D","p1","p2","p3","p4","t","p5","lerp","p6","p7","p8","p9","p10","a","b","c","multiply","c3","add","c2","c1","c0","Polynomial","hasOwnProperty","arcLengthPolynomial","SqrtPolynomial","arcLength","romberg","result","getArcLengthPolynomial","diff","Math","abs","value","eval","polys","getBernsteinPolynomials","dx","getDerivative","dy","roots","getRootsInInterval","concat","forEach","testPoint","Point2D","bbox","getAlignedBezier","getBoundingBox","transform","Matrix2D","translation","rotateFromVector","Vector2D","fromPoints","matrix","inverse","flatness","zeroVector","push","tesselateInterior","baseline","tangent1","tangent2","dmax","equals","perpendicular","Ellipse2D","radiusX","radiusY","Line2D","QuadraticBezier2D","simpson","tangent","Rectangle2D"],"mappings":"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"}